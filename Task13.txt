1.Apache POI:-

 
    <dependency>
   <groupId>org.apache.poi</groupId>
   <artifactId>poi</artifactId>
   <version>3.8</version>
</dependency>

Step2:-

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

FileInputStream file = new FileInputStream(new File("C:\\test.xls"));
			 
HSSFWorkbook workbook = new HSSFWorkbook(file);

HSSFSheet sheet = workbook.getSheetAt(0);

Iterator<Row> rowIterator = sheet.iterator();

Iterator<Cell> cellIterator = row.cellIterator();
    
Step3:-

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFSheet;

FileInputStream file = new FileInputStream(new File("C:\\test.xlsx"));
			

XSSFWorkbook workbook = new XSSFWorkbook (file);

XSSFSheet sheet = workbook.getSheetAt(0);


Iterator<Row> rowIterator = sheet.iterator();

Iterator<Cell> cellIterator = row.cellIterator();


Step 4:-

try {

    FileInputStream file = new FileInputStream(new File("C:\\test.xls"));

   
    HSSFWorkbook workbook = new HSSFWorkbook(file);

    
    HSSFSheet sheet = workbook.getSheetAt(0);

    
    Iterator < Row > rowIterator = sheet.iterator();
    while (rowIterator.hasNext()) {
        Row row = rowIterator.next();

      
        Iterator < Cell > cellIterator = row.cellIterator();
        while (cellIterator.hasNext()) {

            Cell cell = cellIterator.next();

            switch (cell.getCellType()) {
                case Cell.CELL_TYPE_BOOLEAN:
                    System.out.print(cell.getBooleanCellValue() + "\t\t");
                    break;
                case Cell.CELL_TYPE_NUMERIC:
                    System.out.print(cell.getNumericCellValue() + "\t\t");
                    break;
                case Cell.CELL_TYPE_STRING:
                    System.out.print(cell.getStringCellValue() + "\t\t");
                    break;
            }
        }
        System.out.println("");
    }
    file.close();
    FileOutputStream out =
        new FileOutputStream(new File("C:\\test.xls"));
    workbook.write(out);
    out.close();

} catch (FileNotFoundException e) {
    e.printStackTrace();
} catch (IOException e) {
    e.printStackTrace();
}


Step5:-

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

HSSFWorkbook workbook = new HSSFWorkbook();
HSSFSheet sheet = workbook.createSheet("Sample sheet");

Row row = sheet.createRow(0);

Cell cell = row.createCell(0);

cell.setCellValue("Blahblah");

Step6:-

SSFWorkbook workbook = new HSSFWorkbook();
HSSFSheet sheet = workbook.createSheet("Sample sheet");

Map < String, Object[] > data = new HashMap < String, Object[] > ();
data.put("1", new Object[] {
    "Name",
    "Age",
    "Email"
});
data.put("2", new Object[] {
     "John Doe", 30 d,john@test.com
});
data.put("3", new Object[] {
     "Jane Das", 28 d,john@test.com
});
data.put("4", new Object[] {
     "Bob Smith",35 d,jacky@example.com
});

Set < String > keyset = data.keySet();
int rownum = 0;
for (String key: keyset) {
    Row row = sheet.createRow(rownum++);
    Object[] objArr = data.get(key);
    int cellnum = 0;
    for (Object obj: objArr) {
        Cell cell = row.createCell(cellnum++);
        if (obj instanceof Date)
            cell.setCellValue((Date) obj);
        else if (obj instanceof Boolean)
            cell.setCellValue((Boolean) obj);
        else if (obj instanceof String)
            cell.setCellValue((String) obj);
        else if (obj instanceof Double)
            cell.setCellValue((Double) obj);
    }
}

try {
    FileOutputStream out =
        new FileOutputStream(new File("C:\\new.xls"));
    workbook.write(out);
    out.close();
    System.out.println("Excel written successfully..");

} catch (FileNotFoundException e) {
    e.printStackTrace();
} catch (IOException e) {
    e.printStackTrace();
}


4.Write excel file:-
     import java.io.FileOutputStream; 
import java.io.IOException; 
import org.apache.poi.ss.usermodel.Cell; 
import org.apache.poi.ss.usermodel.Row; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
  
// Main class 
public class Program { 
  
    /
    public static void main(String[] args) 
    { 
  
        
        XSSFWorkbook workbook = new XSSFWorkbook(); 
  
        
        XSSFSheet sheet 
            = workbook.createSheet("student Details"); 
  
     
        Map<String, Object[]> data 
            = new TreeMap<String, Object[]>(); 
  
        data.put("1", 
                 new Object[] { "ID", "NAME", "LASTNAME" }); 
        data.put("2", 
                 new Object[] { 1, "Pankaj", "Kumar" }); 
        data.put("3", 
                 new Object[] { 2, "Prakashni", "Yadav" }); 
        data.put("4", new Object[] { 3, "Ayan", "Mondal" }); 
        data.put("5", new Object[] { 4, "Virat", "kohli" }); 
  
       
        Set<String> keyset = data.keySet(); 
  
        int rownum = 0; 
  
        for (String key : keyset) { 
  
            
            Row row = sheet.createRow(rownum++); 
  
            Object[] objArr = data.get(key); 
  
            int cellnum = 0; 
  
            for (Object obj : objArr) { 
  
                Cell cell = row.createCell(cellnum++); 
  
                if (obj instanceof String) 
                    cell.setCellValue((String)obj); 
  
                else if (obj instanceof Integer) 
                    cell.setCellValue((Integer)obj); 
            } 
        } 
  
       
        try { 
  
            
            FileOutputStream out = new FileOutputStream( 
                new File("gfgcontribute.xlsx")); 
            workbook.write(out); 
  
           
            out.close(); 
  
            
            System.out.println( 
                "gfgcontribute.xlsx written successfully on disk."); 
        } 
  
        
        catch (Exception e) { 
  
            
            e.printStackTrace(); 
        } 
    } 


5.Read Excel files:-
 public class Program1{ 
  
    public static void main(String[] args) 
    { 
  
        try { 
  
            
            FileInputStream file = new FileInputStream( 
                new File("gfgcontribute.xlsx")); 
  
            
            XSSFWorkbook workbook = new XSSFWorkbook(file); 
   
            XSSFSheet sheet = workbook.getSheetAt(0); 
  
            Iterator<Row> rowIterator = sheet.iterator(); 
   
            while (rowIterator.hasNext()) { 
  
                Row row = rowIterator.next(); 
  
                
                Iterator<Cell> cellIterator 
                    = row.cellIterator(); 
  
                while (cellIterator.hasNext()) { 
  
                    Cell cell = cellIterator.next(); 
  
                    switch (cell.getCellType()) { 
  
                  
                    case Cell.CELL_TYPE_NUMERIC: 
                        System.out.print( 
                            cell.getNumericCellValue() 
                            + "t"); 
                        break; 
  
                   
                    case Cell.CELL_TYPE_STRING: 
                        System.out.print( 
                            cell.getStringCellValue() 
                            + "t"); 
                        break; 
                    } 
                } 
  
                System.out.println(""); 
            } 
  
            file.close(); 
        } 
  
        
        catch (Exception e) { 
  
            d 
            e.printStackTrace(); 
        } 
    } 
}
